rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    ////////////////////////////////// Users ////////////////////////////////
    match /Users/{userID} {
      allow get;
      allow write: if request.auth.uid == userID;
      match /private/{privateDoc}{
      	allow read, write: if request.auth.uid == userID;
      }
      match /requests{
      	allow read, write: if request.auth.uid == userID;
      }
      match /reviews{
      	allow read, write: if request.auth.uid == userID;
      }
    }
    ////////////////////////////////// Tools ////////////////////////////////
    match /Tools/{toolID}{
        allow read;
        // allow delete if the user is the owner (requester uid == ownerUID)
        allow delete: if request.auth != null && request.auth.uid == resource.data.ownerUID;
        
        // allow update if the user is the owner (requester uid == ownerUID)
        allow update: if request.auth != null && request.auth.uid == resource.data.ownerUID
        // Don't allow changing the ownerUID
        && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['ownerUID']));
        
        // allow creation if the user is authinticated and verified
        // TODO: add checks to see if he's authorized (check FRs)
        allow create: if request.auth != null && request.auth.token.email_verified == true
        // only allow if the request has an ownerUID
        && request.resource.data.ownerUID != null 
        // and the ownerUID (in the request) == the user's uid
        && request.resource.data.ownerUID == request.auth.uid;
        
        match /requests/{renterUID}{
          allow read: if request.auth.uid == renterUID;
          
          allow create: if request.auth != null && request.auth.token.email_verified == true
          && request.auth.uid == renterUID
          && request.resource.data.isRented == false
          && request.resource.data.isAccepted == false;
          
          allow update: if request.auth != null 
          // if the requester is the renter
          && request.auth.uid == renterUID
          // and (s)he's not changing `isAccepted` or `isRented`
          && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAccepted', 'isRented']));
          
          allow delete: if request.auth != null && request.auth.uid == renterUID;
        }
        match /requests/{renterUID} {
          // allow the tool onwer to read all requests
          allow read: if get(/databases/$(database)/documents/Tools/$(toolID)).data.ownerUID == request.auth.uid;
          allow delete: if get(/databases/$(database)/documents/Tools/$(toolID)).data.ownerUID == request.auth.uid;
        }
    }
  }
}