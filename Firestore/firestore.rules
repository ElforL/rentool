rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    ////////////////////////////////// Users ////////////////////////////////
    match /Users/{userID} {
      function isTHEuser(){
        return request.auth != null && userID == request.auth.uid;
      }
      allow get;
      allow write: if isTHEuser();

      // `ID` private doc
      match /private/ID{
        function isIdNumValid(idNumber){
          return idNumber.size() == 10 &&
          // Check if ID is banned
          !exists(/databases/$(database)/documents/bannedList/$(idNumber)) &&
          !exists(/databases/$(database)/documents/idsList/$(idNumber));
        }

      	allow get: if isTHEuser();
        allow create: if isTHEuser() && 
        isIdNumValid(request.resource.data.idNumber);
      }

      // Private docs OTHER THAN `ID`
      match /private/{privateDoc}{
      	allow get: if isTHEuser();
        allow write: if privateDoc == "ID" ? false : // always return false if the doc is 'ID' since its rules are already processed â¬†
        isTHEuser();
      }

      match /requests/{toolID}{
      	allow read: if isTHEuser();
        allow write: if false;
      }
      match /reviews/{reviewID}{
        allow read: if isTHEuser();
        // TODO allow if the user is the author
        allow write: if false;
      }
    }
    ////////////////////////////////// Tools ////////////////////////////////
    match /Tools/{toolID}{
      function hasID(){
        return exists(/databases/$(database)/documents/Users/$(request.auth.uid)/private/ID);
      }

      function isEmailVerified(){
        return request.auth != null && request.auth.token.email_verified == true;
      }

      function isTheOwner(){
        return request.auth != null && request.auth.uid == resource.data.ownerUID;
      }

      function isRequestListed(acceptedRequestID){
        return exists(/databases/$(database)/documents/Tools/$(toolID)/requests/$(acceptedRequestID));
      }

      function isToolValid(isNew){
        // the name description and location must be strings whose length is > 0
        return request.resource.data.description is string
        && request.resource.data.description.size() > 0
        && request.resource.data.name is string
        && request.resource.data.name.size() > 0
        && request.resource.data.location is string
        && request.resource.data.location.size() > 0
        // isAvailable must be a boolean
        && request.resource.data.isAvailable is bool
        // ownerUID must be string and the same as the user's
        && request.resource.data.ownerUID is string
        && request.resource.data.ownerUID == request.auth.uid
        // the rent and insurance must be a numbers and greater than 0
        && request.resource.data.rentPrice is number
        && request.resource.data.rentPrice > 0
        && request.resource.data.insuranceAmount is number
        && request.resource.data.insuranceAmount > 0

        // media can be null or a list
        && (request.resource.data.media is list || request.resource.data.media == null)

        // acceptedRequestID
        && isNew == true 
        ? request.resource.data.acceptedRequestID == null
        : isAcceptedRequestUpdateValid();
      }


      function isAcceptedRequestUpdateValid(){
        // ACCEPT
        return (resource.data.acceptedRequestID == null && request.resource.data.acceptedRequestID is string && isRequestListed(request.resource.data.acceptedRequestID)) ||
        // Cancel
        (resource.data.acceptedRequestID is string && request.resource.data.acceptedRequestID == null) ||
        // UPDATE
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['acceptedRequestID']));
      }

      allow read;
      // allow if the user is the owner
      allow delete: if isTheOwner();
      
      // allow if the user is the owner
      allow update: if isTheOwner()
      // and the updates are valid
      && isToolValid(false);
      
      // allow creation if the user is authinticated and verified
      allow create: if isEmailVerified()
      // and has an ID number
      && hasID()
      // and the tool is valid
      && isToolValid(true);
      
      match /requests/{renterUID}{
        /// checks if the user is the owner of the tool which the request is being send to
        function isTheToolOwner(){
          return get(/databases/$(database)/documents/Tools/$(toolID)).data.ownerUID == request.auth.uid;
        }

        /// checks if the user has the same uid as the document id
        function isTheRenter(){
          return request.auth != null && request.auth.uid == renterUID;
        }

        /// checks the validity of the tool-request's fields except `isAccepted` and `isRented`
        function isRequestFieldsValid(){
          return request.resource.data.toolID is string
          && request.resource.data.toolID == toolID
          && request.resource.data.numOfDays is number
          && request.resource.data.rentPrice is number
          && request.resource.data.rentPrice > 0
          && request.resource.data.insuranceAmount is number
          && request.resource.data.insuranceAmount > 0;
        }

        /// checks the validity of a new tool-request
        function isNewRequestValid(){
          return isRequestFieldsValid()
          // 'isAccepted' and 'isRented' must be false
          && request.resource.data.isRented == false 
          && request.resource.data.isAccepted == false;
        }

        /// checks the validity of updates on a tool-request
        function isRequestUpdateValid(){
          return isRequestFieldsValid()
          // 'isAccepted' and 'isRented' must not be changed
          && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAccepted', 'isRented']));
        }

        allow read: if isTheRenter() || isTheToolOwner();
        allow delete: if (isTheRenter() || isTheToolOwner()) && resource.data.isRented == false;
        
        allow create: if isEmailVerified()
        && hasID()
        && isTheRenter()
        && isNewRequestValid();
        
        allow update: if isTheRenter() && isRequestUpdateValid();
        
      }
    
      // meeting id == request id
      match /meetings/{meetingID}{
        function isActive(){
          return resource.data.isActive == true;
        }

        function didRentStart(){
          return resource.data.rent_started == true;
        }

        function bothArrived(){
          return resource.data.owner_arrived == true && resource.data.renter_arrived == true;
        }

        function bothPicsOK(){
          return resource.data.owner_pics_ok == true && resource.data.renter_pics_ok == true;
        }

        function isTheToolOwner(){
          return request.auth != null && resource.data.ownerUID == request.auth.uid;
        }

        function isTheRenter(){
          return request.auth != null && resource.data.renterUID == request.auth.uid;
        }

        function validAffectedFields(){
          return (isTheRenter() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['renter_arrived', 'renter_pics_ok', 'renter_ids_ok','renter_pics_urls'])) || 
          (isTheToolOwner() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['owner_arrived', 'owner_pics_ok', 'owner_ids_ok','owner_pics_urls']))
        }

        function areRenterUpdatesValid(){
          // if arrive is false you can only change anything `arrive`. (i.e., note `pics` and `ids`)
          return bothArrived() != true ? request.resource.data.diff(resource.data).affectedKeys().hasOnly(['renter_arrived']) : 
          // if arrive is true and pics is false you can only change `arrive` and `pics` (i.e., not `ids`)
          bothPicsOK() != true ? request.resource.data.diff(resource.data).affectedKeys().hasOnly(['renter_arrived', 'renter_pics_ok', 'renter_pics_urls'])
          // if arrive pics and ids are true you can change anything.
          : true;
        }

        function areOwnerUpdatesValid(){
          // if arrive is false you can only change anything `arrive`. (i.e., note `pics` and `ids`)
          return bothArrived() != true ? request.resource.data.diff(resource.data).affectedKeys().hasOnly(['owner_arrived']) : 
          // if arrive is true and pics is false you can only change `arrive` and `pics` (i.e., not `ids`)
          bothPicsOK() != true ? request.resource.data.diff(resource.data).affectedKeys().hasOnly(['owner_arrived', 'owner_pics_ok', 'owner_pics_urls'])
          // if arrive pics and ids are true you can change anything.
          : true;
        }
        

        allow read: if isActive() && (isTheRenter() || isTheToolOwner());

        // NOTE: there's a function listening to changes and changing fields as necessary.
        // e.g., if all is true and pics changed to false the function will change `pics` and `ids` for owner and renter to false.
        allow update: if isActive() &&
        !didRentStart() &&
        validAffectedFields() &&
        isTheRenter() ? areRenterUpdatesValid() : areOwnerUpdatesValid();
      }
    }
  }
}