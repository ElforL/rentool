rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    ////////////////////////////////// Users ////////////////////////////////
    match /Users/{userID} {
      function isTHEuser(){
        return request.auth != null && userID == request.auth.uid;
      }
      allow get;
      allow write: if isTHEuser();

      // `ID` private doc
      match /private/ID{
        function isIdNumValid(idNumber){
          return idNumber.size() == 10 &&
          // Check if ID is banned
          !exists(banlist/${idNumber});
        }

      	allow get: if isTHEuser();
        allow write: if isTHEuser() && 
        // if there is no previous ID set
        (resource == null || !('idNumber' in resource.data) || resource.data.idNumber == null) &&
        isIdNumValid(requst.resource.data.idNumber);
      }

      // Private docs OTHER THAN `ID`
      match /private/{privateDoc}{
      	allow get: if isTHEuser();
        allow write: if privateDoc == "ID" ? false : // always return false if the doc is 'ID' since its rules are already processed â¬†
        isTHEuser();
      }

      match /requests/{toolID}{
      	allow read: if isTHEuser();
        allow write: if false;
      }
      match /reviews/{reviewID}{
        allow read: if isTHEuser();
        // TODO allow if the user is the author
        allow write: if false;
      }
    }
    ////////////////////////////////// Tools ////////////////////////////////
    match /Tools/{toolID}{
      function hasIdAndCredit(){
        return exists(/databases/$(database)/documents/Users/$(request.auth.uid)/private/ID)
        && exists(/databases/$(database)/documents/Users/$(request.auth.uid)/private/creditCard);
      }

      function isEmailVerified(){
        return request.auth != null && request.auth.token.email_verified == true;
      }

      function isTheOwner(){
        return request.auth != null && request.auth.uid == resource.data.ownerUID;
      }

      function isRequestListed(acceptedRequestID){
        return exists(/databases/$(database)/documents/Tools/$(toolID)/requests/$(acceptedRequestID));
      }

      function isToolValid(isNew){
        // the name description and location must be strings whose length is > 0
        return request.resource.data.description is string
        && request.resource.data.description.size() > 0
        && request.resource.data.name is string
        && request.resource.data.name.size() > 0
        && request.resource.data.location is string
        && request.resource.data.location.size() > 0
        // isAvailable must be a boolean
        && request.resource.data.isAvailable is bool
        // ownerUID must be string and the same as the user's
        && request.resource.data.ownerUID is string
        && request.resource.data.ownerUID == request.auth.uid
        // the rent and insurance must be a numbers and greater than 0
        && request.resource.data.rentPrice is number
        && request.resource.data.rentPrice > 0
        && request.resource.data.insuranceAmount is number
        && request.resource.data.insuranceAmount > 0

        // media can be null or a list
        && (request.resource.data.media is list || request.resource.data.media == null)

        // acceptedRequestID
        && isNew == true 
        ? request.resource.data.acceptedRequestID == null
        : isAcceptedRequestUpdateValid();
      }


      function isAcceptedRequestUpdateValid(){
        // ACCEPT
        return (resource.data.acceptedRequestID == null && request.resource.data.acceptedRequestID is string && isRequestListed(request.resource.data.acceptedRequestID)) ||
        // Cancel
        (resource.data.acceptedRequestID is string && request.resource.data.acceptedRequestID == null) ||
        // UPDATE
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['acceptedRequestID']));
      }

      allow read;
      // allow if the user is the owner
      allow delete: if isTheOwner();
      
      // allow if the user is the owner
      allow update: if isTheOwner()
      // and the updates are valid
      && isToolValid(false);
      
      // allow creation if the user is authinticated and verified
      allow create: if isEmailVerified()
      // and has an ID number and a credit card
      && hasIdAndCredit()
      // and the tool is valid
      && isToolValid(true);
      
      match /requests/{renterUID}{
        /// checks if the user is the owner of the tool which the request is being send to
        function isTheToolOwner(){
          return get(/databases/$(database)/documents/Tools/$(toolID)).data.ownerUID == request.auth.uid;
        }

        /// checks if the user has the same uid as the document id
        function isTheRenter(){
          return request.auth != null && request.auth.uid == renterUID;
        }

        /// checks the validity of the tool-request's fields except `isAccepted` and `isRented`
        function isRequestFieldsValid(){
          return request.resource.data.toolID is string
          && request.resource.data.toolID == toolID
          && request.resource.data.numOfDays is number
          && request.resource.data.rentPrice is number
          && request.resource.data.rentPrice > 0
          && request.resource.data.insuranceAmount is number
          && request.resource.data.insuranceAmount > 0;
        }

        /// checks the validity of a new tool-request
        function isNewRequestValid(){
          return isRequestFieldsValid()
          // 'isAccepted' and 'isRented' must be false
          && request.resource.data.isRented == false 
          && request.resource.data.isAccepted == false;
        }

        /// checks the validity of updates on a tool-request
        function isRequestUpdateValid(){
          return isRequestFieldsValid()
          // 'isAccepted' and 'isRented' must not be changed
          && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAccepted', 'isRented']));
        }

        allow read, delete: if isTheRenter() || isTheToolOwner();
        
        allow create: if isEmailVerified()
        && hasIdAndCredit()
        && isTheRenter()
        && isNewRequestValid();
        
        allow update: if isTheRenter() && isRequestUpdateValid();
        
      }
    }
  }
}