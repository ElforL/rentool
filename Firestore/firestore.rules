rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin(){
      return request.auth.token.admin == true;
    }
    ////////////////////////////////// Users ////////////////////////////////
    match /Users/{userID} {
      function isTHEuser(){
        return request.auth != null && userID == request.auth.uid;
      }
      allow get;

      allow write: if isAdmin();

      allow create: if isTHEuser()
      && request.resource.data.rating == 0;

      allow update: if isTHEuser()
      && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['rating']));

      // `ID` private doc
      match /private/ID{
        function isIdNumValid(idNumber){
          return idNumber.size() == 10 &&
          // Check if ID is banned
          !exists(/databases/$(database)/documents/bannedList/$(idNumber)) &&
          !exists(/databases/$(database)/documents/idsList/$(idNumber));
        }

      	allow get: if isTHEuser();
        allow create: if isTHEuser() && 
        request.resource.data.keys().hasOnly(['idNumber']) &&
        isIdNumValid(request.resource.data.idNumber);
      }

      match /devices/{fcmToken}{
        function areFieldsValid(){
          return request.resource.data.deviceName is string &&
          (request.resource.data.token is string || request.resource.data.token == null);
        }

      	allow read: if isTHEuser();
        allow create, update: if isTHEuser() && areFieldsValid();
        allow delete: if isTHEuser();
      }

      match /notifications/{notificationID}{
        function onlyChangedRead(){
          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead'])
          && request.resource.data.isRead is bool;
        }

      	allow read: if isTHEuser();
        // only allow the user to change `isRead` field
        allow update: if onlyChangedRead(); 
      }

      match /requests/{toolID}{
      	allow read: if isTHEuser();
        allow write: if false;
      }

      match /reviews/{reviewerUID}{
        function isTheReviewer(){
          return request.auth != null && request.auth.uid == reviewerUID;
        }

        function isValidReview(){
          return request.resource.data.value is int && 
          request.resource.data.value >= 1 &&
          request.resource.data.value <= 5 &&
          
          // Validate 'description' is null or a string that is less than 501 characters.
          (request.resource.data.description == null ||
          request.resource.data.description is string &&
          request.resource.data.description.size() <= 500) &&

          request.resource.data.creatorUID != request.resource.data.targetUID &&
          request.resource.data.creatorUID == reviewerUID &&
          request.resource.data.targetUID == userID;
        }

        allow read;
        allow delete: if isTheReviewer();
        allow create, update: if isTheReviewer() &&
        isValidReview() &&
        exists(/databases/$(database)/documents/Users/$(request.auth.uid)/previous_users/$(userID));
      }

      match /previous_users/{uid}{
        allow read: if isTHEuser();
      }
    }
    ////////////////////////////////// Tools ////////////////////////////////
    match /Tools/{toolID}{
      function hasID(){
        return exists(/databases/$(database)/documents/Users/$(request.auth.uid)/private/ID);
      }

      function isEmailVerified(){
        return request.auth != null && request.auth.token.email_verified == true;
      }

      function isTheOwner(){
        return request.auth != null && request.auth.uid == resource.data.ownerUID;
      }

      function isRequestListed(acceptedRequestID){
        return exists(/databases/$(database)/documents/Tools/$(toolID)/requests/$(acceptedRequestID));
      }

      function isToolValid(isNew){
        // the name description and location must be strings whose length is > 0
        return request.resource.data.description is string
        && request.resource.data.description.size() > 0
        && request.resource.data.name is string
        && request.resource.data.name.size() > 0
        && request.resource.data.location is string
        && request.resource.data.location.size() > 0
        // isAvailable must be a boolean
        && request.resource.data.isAvailable is bool
        // ownerUID must be string and the same as the user's
        && request.resource.data.ownerUID is string
        && request.resource.data.ownerUID == request.auth.uid
        // the rent and insurance must be a numbers and greater than 0
        && request.resource.data.rentPrice is number
        && request.resource.data.rentPrice > 0
        && request.resource.data.insuranceAmount is number
        && request.resource.data.insuranceAmount > 0

        // media can be null or a list
        && (request.resource.data.media is list || request.resource.data.media == null)

        && isNew == true
        ? request.resource.data.currentRent == null
        : !request.resource.data.diff(resource.data).affectedKeys().hasAny(['currentRent'])

        // acceptedRequestID
        && isNew == true 
        ? request.resource.data.acceptedRequestID == null
        : isAcceptedRequestUpdateValid();
      }


      function isAcceptedRequestUpdateValid(){
        // ACCEPT: allow if `acceptedRequestID` is in `/requests`
        return (resource.data.acceptedRequestID == null && request.resource.data.acceptedRequestID is string && isRequestListed(request.resource.data.acceptedRequestID)) ||
        // Cancel: allow if there's no current rent
        (resource.data.currentRent == null && resource.data.acceptedRequestID is string && request.resource.data.acceptedRequestID == null) ||
        // UPDATE: allow if `acceptedRequestID` wasn't changed
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['acceptedRequestID']));
      }

      allow write: if isAdmin();
      allow read;
      // allow if the user is the owner
      allow delete: if isTheOwner() && resource.data.currentRent == null;
      
      // allow if the user is the owner
      allow update: if isTheOwner()
      // and the updates are valid
      && isToolValid(false);
      
      // allow creation if the user is authinticated and verified
      allow create: if isEmailVerified()
      // and has an ID number
      && hasID()
      // and the tool is valid
      && isToolValid(true);
      
      match /requests/{requestID}{
        /// checks if the user is the owner of the tool which the request is being send to
        function isTheToolOwner(){
          return get(/databases/$(database)/documents/Tools/$(toolID)).data.ownerUID == request.auth.uid;
        }

        /// checks if the user has the same uid as the `renterUID` field
        function isTheRenter(){
          return request.auth != null && resource.data.renterUID == request.auth.uid;
        }

        function hasNoPreviousRequests(){
          return !exists(/databases/$(database)/documents/Users/$(request.auth.uid)/requests/$(toolID));
        }

        /// checks the validity of the tool-request's fields except `isAccepted` and `isRented`
        function isRequestFieldsValid(){
          return request.resource.data.renterUID == request.auth.uid 
          && request.resource.data.toolID is string
          && request.resource.data.toolID == toolID
          && request.resource.data.numOfDays is number
          && request.resource.data.rentPrice is number
          && request.resource.data.rentPrice > 0
          && request.resource.data.insuranceAmount is number
          && request.resource.data.insuranceAmount > 0;
        }

        /// checks the validity of a new tool-request
        function isNewRequestValid(){
          return isRequestFieldsValid()
          // 'isAccepted' and 'isRented' must be false
          && request.resource.data.isRented == false 
          && request.resource.data.isAccepted == false;
        }

        /// checks the validity of updates on a tool-request
        function isRequestUpdateValid(){
          return isRequestFieldsValid()
          // 'isAccepted' and 'isRented' must not be changed
          // TODO don't allow to delete if there's a current rent
          // maybe don't allow if it's the accepted request and implement a way to cancel (but not delete) an accepted request
          && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAccepted', 'isRented']));
        }

        allow read, write: if isAdmin();
        allow read: if isTheRenter() || isTheToolOwner();
        allow delete: if (isTheRenter() || isTheToolOwner()) && resource.data.isRented == false;
        
        allow create: if isEmailVerified()
        && hasID()
        && hasNoPreviousRequests()
        && isNewRequestValid();
        
        // if the request is accepted the renter CAN'T update it
        allow update: if (resource.data.isAccepted == true) ? false : (isTheRenter() && isRequestUpdateValid());

        match /messages/{messageID}{
          function isTheRenterForMessage(){
            return get(/databases/$(database)/documents/Tools/$(toolID)/requests/$(requestID)).data.renterUID == request.auth.uid;
          }

          function areMessageFieldsValid(){
            return request.resource.data.uid == request.auth.uid &&
            request.resource.data.message is string &&
            request.resource.data.sentTime == request.time;
          }

          allow read, write: if isAdmin();
          allow read: if isTheRenterForMessage() || isTheToolOwner();
          allow create: if areMessageFieldsValid();
        }
      }
    
      match /deliver_meetings/{requestID}{
        function isActive(){
          return resource.data.isActive == true;
        }

        function didRentStart(){
          return resource.data.rent_started == true;
        }

        function bothArrived(){
          return resource.data.owner_arrived == true && resource.data.renter_arrived == true;
        }

        function bothPicsOK(){
          return resource.data.owner_pics_ok == true && resource.data.renter_pics_ok == true;
        }

        // TODO #26 ensure owner and renter uids match the request's
        function isTheToolOwner(){
          return request.auth != null && resource.data.ownerUID == request.auth.uid;
        }

        function isTheRenter(){
          return request.auth != null && resource.data.renterUID == request.auth.uid;
        }

        function validAffectedFields(){
          return (isTheRenter() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['renter_arrived', 'renter_pics_ok', 'renter_ids_ok','renter_pics_urls'])) || 
          (isTheToolOwner() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['owner_arrived', 'owner_pics_ok', 'owner_ids_ok','owner_pics_urls']))
        }

        function areValidFields(){
          return request.resource.data.renter_arrived is bool &&
          request.resource.data.renter_pics_ok is bool &&
          request.resource.data.renter_ids_ok is bool &&
          request.resource.data.renter_pics_urls is list &&
          request.resource.data.owner_arrived is bool &&
          request.resource.data.owner_pics_ok is bool &&
          request.resource.data.owner_ids_ok is bool &&
          request.resource.data.owner_pics_urls is list;
        }

        function areRenterUpdatesValid(){
          // if arrive is false you can only change anything `arrive`. (i.e., note `pics` and `ids`)
          return bothArrived() != true ? request.resource.data.diff(resource.data).affectedKeys().hasOnly(['renter_arrived']) : 
          // if arrive is true and pics is false you can only change `arrive` and `pics` (i.e., not `ids`)
          bothPicsOK() != true ? request.resource.data.diff(resource.data).affectedKeys().hasOnly(['renter_arrived', 'renter_pics_ok', 'renter_pics_urls'])
          // if arrive pics and ids are true you can change anything.
          : true;
        }

        function areOwnerUpdatesValid(){
          // if arrive is false you can only change anything `arrive`. (i.e., note `pics` and `ids`)
          return bothArrived() != true ? request.resource.data.diff(resource.data).affectedKeys().hasOnly(['owner_arrived']) : 
          // if arrive is true and pics is false you can only change `arrive` and `pics` (i.e., not `ids`)
          bothPicsOK() != true ? request.resource.data.diff(resource.data).affectedKeys().hasOnly(['owner_arrived', 'owner_pics_ok', 'owner_pics_urls'])
          // if arrive pics and ids are true you can change anything.
          : true;
        }
        

        allow read, write: if isAdmin();
        allow read: if isActive() && (isTheRenter() || isTheToolOwner());

        // NOTE: there's a function listening to changes and changing fields as necessary.
        // e.g., if all is true and pics changed to false the function will change `pics` and `ids` for owner and renter to false.
        allow update: if isActive() &&
        areValidFields() &&
        !didRentStart() &&
        validAffectedFields() &&
        (isTheRenter() ? areRenterUpdatesValid() : areOwnerUpdatesValid());
      }

      match /return_meetings/{requestID}{
        function isActive(){
          return resource.data.isActive == true;
        }

        function bothArrived(){
          return resource.data.ownerArrived == true && resource.data.renterArrived == true;
        }

        function isTheToolOwner(){
          return request.auth != null && resource.data.ownerUID == request.auth.uid;
        }

        function isTheRenter(){
          return request.auth != null && resource.data.renterUID == request.auth.uid;
        }

        function validAffectedFields(){
          return (isTheRenter() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['renterArrived','renterAdmitDamage','renterConfirmHandover', 'renterAcceptCompensationPrice', 'renterMediaOK', 'renterMediaUrls'])) || 
          (isTheToolOwner() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ownerArrived','toolDamaged','ownerConfirmHandover', 'compensationPrice', 'ownerMediaOK', 'ownerMediaUrls']))
        }

        function onlyAllow(list){
          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(list);
        }

        function areValidFields(){
          return request.resource.data.renterArrived is bool &&
          request.resource.data.renterConfirmHandover is bool &&
          request.resource.data.renterMediaOK is bool &&
          (request.resource.data.renterAdmitDamage is bool || request.resource.data.renterAdmitDamage == null) &&
          (request.resource.data.renterAcceptCompensationPrice is bool || request.resource.data.renterAcceptCompensationPrice == null) &&
          request.resource.data.renterMediaUrls is list &&

          request.resource.data.ownerArrived is bool &&
          request.resource.data.ownerConfirmHandover is bool &&
          request.resource.data.ownerMediaOK is bool &&
          (request.resource.data.toolDamaged is bool || request.resource.data.toolDamaged == null) &&
          (request.resource.data.compensationPrice is float || request.resource.data.compensationPrice == null) &&
          request.resource.data.ownerMediaUrls is list;
        }

        function areRenterUpdatesValid() {
          return ((resource.data.disagreementCaseSettled != null)
              ? (resource.data.disagreementCaseSettled == false)
                  ?
                  // 👮⏳
                  false //allowNothing()
                  :
                  // 👮✅
                  (bothArrived() == true)
                      ?
                      // 🤝 both arrived
                      (resource.data.disagreementCaseResult == true)
                          ?
                          // 👮💔
                          (resource.data.compensationPrice != null)
                              ? (resource.data.renterAcceptCompensationPrice == true)
                                  ? onlyAllow(['renterArrived', 'renterAcceptCompensationPrice', 'renterConfirmHandover'])
                                  : onlyAllow(['renterArrived', 'renterAcceptCompensationPrice'])
                              : onlyAllow(['renterArrived'])
                          :
                          // 👮💖
                          onlyAllow(['renterArrived', 'renterConfirmHandover'])
                      :
                      // 🧍 didn't both arrive
                      onlyAllow(['renterArrived'])
              : (bothArrived() == false)
                  ?
                  // 🧍
                  onlyAllow(['renterArrived'])
                  :
                  // 🤝
                  (resource.data.toolDamaged == null)
                      ?
                      // ❓ Tool unchecked
                      onlyAllow(['renterArrived'])
                      : (resource.data.toolDamaged == true)
                          ?
                          // 💔 Tool Damaged
                          (resource.data.renterAdmitDamage != null)
                              ?
                              // Renter responded to claims
                              (resource.data.renterAdmitDamage == true)
                                  ?
                                  // 😞 Admit damage
                                  (resource.data.compensationPrice != null)
                                      ? (resource.data.renterAcceptCompensationPrice== true)
                                          ? onlyAllow([
                                              'renterArrived',
                                              'renterAdmitDamage',
                                              'renterAcceptCompensationPrice',
                                              'renterConfirmHandover',
                                            ])
                                          : onlyAllow([
                                              'renterArrived',
                                              'renterAdmitDamage',
                                              'renterAcceptCompensationPrice',
                                            ])
                                      : onlyAllow(['renterArrived', 'renterAdmitDamage'])
                                  :
                                  // 😡 Deny damage
                                  (resource.data.renterMediaOK == true)
                                      ? onlyAllow(['renterArrived', 'renterAdmitDamage', 'renterMediaOK'])
                                      : onlyAllow(['renterArrived', 'renterAdmitDamage', 'renterMediaUrls', 'renterMediaOK'])
                              :
                              // Renter hasn't responded to claims yet
                              onlyAllow(['renterArrived', 'renterAdmitDamage'])
                          :
                          // 💖 Tool Undamaged
                          onlyAllow(['renterArrived', 'renterConfirmHandover'])
          );
        }
        
        function areOwnerUpdatesValid() {
          return ((resource.data.disagreementCaseSettled != null)
              ? (resource.data.disagreementCaseSettled == false)
                  ?
                  // 👮⏳
                  false //allowNothing()
                  :
                  // 👮✅
                  (bothArrived() == true)
                      ?
                      // 🤝 both arrived
                      (resource.data.disagreementCaseResult == true)
                          ?
                          // 👮💔
                          (resource.data.renterAcceptCompensationPrice != null && resource.data.renterAcceptCompensationPrice == true)
                              ? onlyAllow(['ownerArrived', 'ownerConfirmHandover'])
                              : onlyAllow(['ownerArrived', 'compensationPrice'])
                          :
                          // 👮💖
                          onlyAllow(['ownerArrived', 'ownerConfirmHandover'])
                      :
                      // 🧍 didn't both arrive
                      onlyAllow(['ownerArrived'])
              : (bothArrived() == false)
                  ?
                  // 🧍
                  onlyAllow(['ownerArrived'])
                  :
                  // 🤝
                  (resource.data.toolDamaged == null)
                      ?
                      // ❓ Tool unchecked
                      onlyAllow(['ownerArrived', 'toolDamaged'])
                      : (resource.data.toolDamaged == true)
                          ?
                          // 💔 Tool Damaged
                          (resource.data.renterAdmitDamage != null)
                              ?
                              // Renter responded to claims
                              (resource.data.renterAdmitDamage == true)
                                  ?
                                  // 😞 Admit damage
                                  (resource.data.renterAcceptCompensationPrice != null && resource.data.renterAcceptCompensationPrice == true)
                                      ? onlyAllow(['ownerArrived', 'toolDamaged', 'compensationPrice', 'ownerConfirmHandover'])
                                      : onlyAllow(['ownerArrived', 'toolDamaged', 'compensationPrice'])
                                  :
                                  // 😡 Deny damage
                                  (resource.data.ownerMediaOK == true)
                                      ? onlyAllow(['ownerArrived', 'toolDamaged', 'ownerMediaOK'])
                                      : onlyAllow(['ownerArrived', 'toolDamaged', 'ownerMediaUrls', 'ownerMediaOK'])
                              :
                              // Renter hasn't responded to claims yet
                              onlyAllow(['ownerArrived', 'toolDamaged'])
                          :
                          // 💖 Tool Undamaged
                          onlyAllow(['ownerArrived', 'toolDamaged', 'ownerConfirmHandover'])
          );
        }

        // TODO validNewVals() e.g., check if compensation price is a double and < resource.data.insuranceAmount

        allow read, write: if isAdmin();
        allow read: if isActive() && (isTheRenter() || isTheToolOwner());

        allow update: if isActive() &&
        validAffectedFields() &&
        areValidFields() &&
        (isTheRenter() ? areRenterUpdatesValid() : areOwnerUpdatesValid());
      }
    }
  
    match /disagreementCases/{caseId} {
      allow read: if isAdmin();
      allow update: if isAdmin() && disagreementCasesValidFields();


      function disagreementCasesValidFields(){
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['Admin', 'Result_IsToolDamaged', 'ResultDescription'])
        // can't update other admin's case
        && (resource.data.Admin == null || resource.data.Admin == request.auth.uid)
        && request.resource.data.Admin == request.auth.uid
        // The admin can't be a side in the case
        && request.resource.data.ownerUID != request.auth.uid
        && request.resource.data.renterUID != request.auth.uid
        && request.resource.data.Result_IsToolDamaged is bool
        && request.resource.data.Result_IsToolDamaged is string;
      }
    }
  }
}